{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPRMlVFkZClQ2HUcO8mNVy2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"HnOCOg1nZOR-"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["# Introduction to Distributed Computing"],"metadata":{"id":"myH1NfaLZkRU"}},{"cell_type":"markdown","source":["- Started out with massive mainframe computers\n","- Early terminals had almost no computing capacity, computing took place on server\n","- PC revolution gave far more computing power on individual devices, shift away from mainframe devices\n","- Cloud computing represents a shift back, but cloud computing is STILL distributed across different nodes in a cloud computing architecture.\n","\n","- Nodes can be physically close to each other, since the network needs to be high-throughput.\n","\n","Dask, Pyspark, we're staying high-level.\n","\n","Python has an extensive library system, is easy to use, etc.\n","\n","Python's major limitation is the GIL. That's the global interpreter lock. Python wasn't initially designed for multithreaded work, so you have to grab the lock for every task, ultimately rate-limiting the code when myltithreaded.\n","\n","Doesn't have speed of C++ or Java\n","\n","Doesn't have good memory management\n","Dynamic typing is useful but can lead to runtime errors.\n","Thread pools in python\n","Generators and iterators in SI 507\n","  Offer up a value at a time to prevent RAM overload.\n","  Never instantiate the entire dataset at once.\n","\n","\n","Decorators are syntactic sugar to make it nicer.\n","\n"],"metadata":{"id":"Gr5bzjNqbKFB"}},{"cell_type":"markdown","source":["# Introduction to Python for Distributed Computing"],"metadata":{"id":"_CuILI_0ZoyE"}},{"cell_type":"markdown","source":["# Dask"],"metadata":{"id":"ffCBm6KlZuaB"}},{"cell_type":"markdown","source":["Dask is a clever package. It has dataframes, which are a good substitute for Pandas.\n","\n","Has dynamic task scheduling.\n","\n","Plays well with Python ecosystem\n","\n","Scalable.\n","\n","Dask does NOT require ALL DATA to be HELD IN RAM at ONCE. PANDAS DOES.\n","Dask capitalizes on lazy evaluation, which lets it load in only whatever data you need. Why load in all the data when you're only requesting the minimum of one column?\n","\n","Dask has a lot of components.\n","\n","Dask Array = np array\n","Dask df ~ Pandas df, but it doesn't have as many attributes or features as Dask.\n","Dask Bag: Unordered set of items, like a list. Can contain duplicates. Between a set and a list.\n","Dask Delayed: Lets you use any code with graphs and schedulers.\n","\n","Graphs and Schedulers:\n","Given a task, will create a compute graph.\n","Compute graph is a dictionary like dat structure that represents a sequence of computations where each node corresponds to an outputs, and each edge points at an operation pruducing  that output. This non-cyclical, directed graph privides a high-level view of computation being carried out, making it easier to conceptualize and debug.\n","Vertices/nodes, represent outputs as arrays or numbers.\n","Edges signify operations, the computations that produce the outputs.\n","Data Dependencies: Represented by edges.\n","In Dask, a scheduler allows you to specify what you want\n","  Dask creates the graph, then schedules the tasks across one machine or multiple nodes.\n","  This scheduler allows for increased efficiency. But, how smart is the scheduler? The naieve scheduler will only give each person one task, and wait for everyone to finish, while a better scheduler will allow for more advanced scheduling."],"metadata":{"id":"qLz3jbGSjX61"}}]}
